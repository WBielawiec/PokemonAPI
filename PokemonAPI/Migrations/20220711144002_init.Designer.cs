// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PokemonAPI.Entities;

namespace PokemonAPI.Migrations
{
    [DbContext(typeof(PokeDbContext))]
    [Migration("20220711144002_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PokemonAPI.Entities.Backpack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Backpacks");
                });

            modelBuilder.Entity("PokemonAPI.Entities.BackpackItem", b =>
                {
                    b.Property<int>("BackpackId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("BackpackId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("BackpackItems");
                });

            modelBuilder.Entity("PokemonAPI.Entities.BackpackMove", b =>
                {
                    b.Property<int>("BackpackId")
                        .HasColumnType("int");

                    b.Property<int>("MoveId")
                        .HasColumnType("int");

                    b.HasKey("BackpackId", "MoveId");

                    b.HasIndex("MoveId");

                    b.ToTable("BackpackMoves");
                });

            modelBuilder.Entity("PokemonAPI.Entities.BackpackPokemon", b =>
                {
                    b.Property<int>("BackpackId")
                        .HasColumnType("int");

                    b.Property<int>("PokemonId")
                        .HasColumnType("int");

                    b.HasKey("BackpackId", "PokemonId");

                    b.HasIndex("PokemonId");

                    b.ToTable("BackpackPokemons");
                });

            modelBuilder.Entity("PokemonAPI.Entities.Base", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Attack")
                        .HasColumnType("int");

                    b.Property<int>("Defense")
                        .HasColumnType("int");

                    b.Property<int>("HP")
                        .HasColumnType("int");

                    b.Property<int>("SpAttack")
                        .HasColumnType("int");

                    b.Property<int>("SpDefense")
                        .HasColumnType("int");

                    b.Property<int>("Speed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Base");
                });

            modelBuilder.Entity("PokemonAPI.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("PokemonAPI.Entities.Move", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("Accuracy")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PP")
                        .HasColumnType("int");

                    b.Property<int?>("Power")
                        .HasColumnType("int");

                    b.Property<int?>("TM")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Moves");
                });

            modelBuilder.Entity("PokemonAPI.Entities.Pokemon", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("BaseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaseId")
                        .IsUnique();

                    b.ToTable("Pokemons");
                });

            modelBuilder.Entity("PokemonAPI.Entities.PokemonType", b =>
                {
                    b.Property<int>("PokemonId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("PokemonId", "TypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("PokemonTypes");
                });

            modelBuilder.Entity("PokemonAPI.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("PokemonAPI.Entities.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("PokemonAPI.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PokemonAPI.Entities.Backpack", b =>
                {
                    b.HasOne("PokemonAPI.Entities.User", "Owner")
                        .WithOne("Backpack")
                        .HasForeignKey("PokemonAPI.Entities.Backpack", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("PokemonAPI.Entities.BackpackItem", b =>
                {
                    b.HasOne("PokemonAPI.Entities.Backpack", "Backpack")
                        .WithMany("BackpackItems")
                        .HasForeignKey("BackpackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonAPI.Entities.Item", "Item")
                        .WithMany("BackpackItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Backpack");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("PokemonAPI.Entities.BackpackMove", b =>
                {
                    b.HasOne("PokemonAPI.Entities.Backpack", "Backpack")
                        .WithMany("BackpackMoves")
                        .HasForeignKey("BackpackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonAPI.Entities.Move", "Move")
                        .WithMany("BackpackMoves")
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Backpack");

                    b.Navigation("Move");
                });

            modelBuilder.Entity("PokemonAPI.Entities.BackpackPokemon", b =>
                {
                    b.HasOne("PokemonAPI.Entities.Backpack", "Backpack")
                        .WithMany("BackpackPokemons")
                        .HasForeignKey("BackpackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonAPI.Entities.Pokemon", "pokemon")
                        .WithMany("BackpackPokemons")
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Backpack");

                    b.Navigation("pokemon");
                });

            modelBuilder.Entity("PokemonAPI.Entities.Pokemon", b =>
                {
                    b.HasOne("PokemonAPI.Entities.Base", "Base")
                        .WithOne("Pokemon")
                        .HasForeignKey("PokemonAPI.Entities.Pokemon", "BaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Base");
                });

            modelBuilder.Entity("PokemonAPI.Entities.PokemonType", b =>
                {
                    b.HasOne("PokemonAPI.Entities.Pokemon", "Pokemon")
                        .WithMany("Type")
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonAPI.Entities.Type", "Type")
                        .WithMany("Pokemons")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pokemon");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("PokemonAPI.Entities.User", b =>
                {
                    b.HasOne("PokemonAPI.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PokemonAPI.Entities.Backpack", b =>
                {
                    b.Navigation("BackpackItems");

                    b.Navigation("BackpackMoves");

                    b.Navigation("BackpackPokemons");
                });

            modelBuilder.Entity("PokemonAPI.Entities.Base", b =>
                {
                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("PokemonAPI.Entities.Item", b =>
                {
                    b.Navigation("BackpackItems");
                });

            modelBuilder.Entity("PokemonAPI.Entities.Move", b =>
                {
                    b.Navigation("BackpackMoves");
                });

            modelBuilder.Entity("PokemonAPI.Entities.Pokemon", b =>
                {
                    b.Navigation("BackpackPokemons");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("PokemonAPI.Entities.Type", b =>
                {
                    b.Navigation("Pokemons");
                });

            modelBuilder.Entity("PokemonAPI.Entities.User", b =>
                {
                    b.Navigation("Backpack");
                });
#pragma warning restore 612, 618
        }
    }
}
